/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './fusioncharts.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from './fusioncharts.service';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/core/src/linker/element_ref';
import * as import11 from '@angular/core/src/change_detection/differs/keyvalue_differs';
export class Wrapper_FusionChartsComponent {
  /*private*/ _eventHandler:Function;
  context:import0.FusionChartsComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  /*private*/ _expr_27:any;
  /*private*/ _expr_28:any;
  /*private*/ _expr_29:any;
  /*private*/ _expr_30:any;
  /*private*/ _expr_31:any;
  /*private*/ _expr_32:any;
  /*private*/ _expr_33:any;
  /*private*/ _expr_34:any;
  /*private*/ _expr_35:any;
  /*private*/ _expr_36:any;
  /*private*/ _expr_37:any;
  /*private*/ _expr_38:any;
  /*private*/ _expr_39:any;
  /*private*/ _expr_40:any;
  /*private*/ _expr_41:any;
  /*private*/ _expr_42:any;
  /*private*/ _expr_43:any;
  /*private*/ _expr_44:any;
  /*private*/ _expr_45:any;
  /*private*/ _expr_46:any;
  /*private*/ _expr_47:any;
  /*private*/ _expr_48:any;
  /*private*/ _expr_49:any;
  /*private*/ _expr_50:any;
  /*private*/ _expr_51:any;
  /*private*/ _expr_52:any;
  /*private*/ _expr_53:any;
  /*private*/ _expr_54:any;
  /*private*/ _expr_55:any;
  /*private*/ _expr_56:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.FusionChartsComponent(p0,p1,p2);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
    this._expr_21 = import1.UNINITIALIZED;
    this._expr_22 = import1.UNINITIALIZED;
    this._expr_23 = import1.UNINITIALIZED;
    this._expr_24 = import1.UNINITIALIZED;
    this._expr_25 = import1.UNINITIALIZED;
    this._expr_26 = import1.UNINITIALIZED;
    this._expr_27 = import1.UNINITIALIZED;
    this._expr_28 = import1.UNINITIALIZED;
    this._expr_29 = import1.UNINITIALIZED;
    this._expr_30 = import1.UNINITIALIZED;
    this._expr_31 = import1.UNINITIALIZED;
    this._expr_32 = import1.UNINITIALIZED;
    this._expr_33 = import1.UNINITIALIZED;
    this._expr_34 = import1.UNINITIALIZED;
    this._expr_35 = import1.UNINITIALIZED;
    this._expr_36 = import1.UNINITIALIZED;
    this._expr_37 = import1.UNINITIALIZED;
    this._expr_38 = import1.UNINITIALIZED;
    this._expr_39 = import1.UNINITIALIZED;
    this._expr_40 = import1.UNINITIALIZED;
    this._expr_41 = import1.UNINITIALIZED;
    this._expr_42 = import1.UNINITIALIZED;
    this._expr_43 = import1.UNINITIALIZED;
    this._expr_44 = import1.UNINITIALIZED;
    this._expr_45 = import1.UNINITIALIZED;
    this._expr_46 = import1.UNINITIALIZED;
    this._expr_47 = import1.UNINITIALIZED;
    this._expr_48 = import1.UNINITIALIZED;
    this._expr_49 = import1.UNINITIALIZED;
    this._expr_50 = import1.UNINITIALIZED;
    this._expr_51 = import1.UNINITIALIZED;
    this._expr_52 = import1.UNINITIALIZED;
    this._expr_53 = import1.UNINITIALIZED;
    this._expr_54 = import1.UNINITIALIZED;
    this._expr_55 = import1.UNINITIALIZED;
    this._expr_56 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_dataSource(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.dataSource = currValue;
      this._changes['dataSource'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_type(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.type = currValue;
      this._changes['type'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_id(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.id = currValue;
      this._changes['id'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_width(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.width = currValue;
      this._changes['width'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_height(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.height = currValue;
      this._changes['height'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_renderAt(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.renderAt = currValue;
      this._changes['renderAt'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_dataFormat(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.dataFormat = currValue;
      this._changes['dataFormat'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_events(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.events = currValue;
      this._changes['events'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_link(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.link = currValue;
      this._changes['link'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  check_showDataLoadingMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.showDataLoadingMessage = currValue;
      this._changes['showDataLoadingMessage'] = new import1.SimpleChange(this._expr_9,currValue);
      this._expr_9 = currValue;
    }
  }
  check_showChartLoadingMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.showChartLoadingMessage = currValue;
      this._changes['showChartLoadingMessage'] = new import1.SimpleChange(this._expr_10,currValue);
      this._expr_10 = currValue;
    }
  }
  check_baseChartMessageFont(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.baseChartMessageFont = currValue;
      this._changes['baseChartMessageFont'] = new import1.SimpleChange(this._expr_11,currValue);
      this._expr_11 = currValue;
    }
  }
  check_baseChartMessageFontSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.baseChartMessageFontSize = currValue;
      this._changes['baseChartMessageFontSize'] = new import1.SimpleChange(this._expr_12,currValue);
      this._expr_12 = currValue;
    }
  }
  check_baseChartMessageColor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this._changed = true;
      this.context.baseChartMessageColor = currValue;
      this._changes['baseChartMessageColor'] = new import1.SimpleChange(this._expr_13,currValue);
      this._expr_13 = currValue;
    }
  }
  check_dataLoadStartMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this._changed = true;
      this.context.dataLoadStartMessage = currValue;
      this._changes['dataLoadStartMessage'] = new import1.SimpleChange(this._expr_14,currValue);
      this._expr_14 = currValue;
    }
  }
  check_dataLoadErrorMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this._changed = true;
      this.context.dataLoadErrorMessage = currValue;
      this._changes['dataLoadErrorMessage'] = new import1.SimpleChange(this._expr_15,currValue);
      this._expr_15 = currValue;
    }
  }
  check_dataInvalidMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this._changed = true;
      this.context.dataInvalidMessage = currValue;
      this._changes['dataInvalidMessage'] = new import1.SimpleChange(this._expr_16,currValue);
      this._expr_16 = currValue;
    }
  }
  check_dataEmptyMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this._changed = true;
      this.context.dataEmptyMessage = currValue;
      this._changes['dataEmptyMessage'] = new import1.SimpleChange(this._expr_17,currValue);
      this._expr_17 = currValue;
    }
  }
  check_typeNotSupportedMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this._changed = true;
      this.context.typeNotSupportedMessage = currValue;
      this._changes['typeNotSupportedMessage'] = new import1.SimpleChange(this._expr_18,currValue);
      this._expr_18 = currValue;
    }
  }
  check_loadMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this._changed = true;
      this.context.loadMessage = currValue;
      this._changes['loadMessage'] = new import1.SimpleChange(this._expr_19,currValue);
      this._expr_19 = currValue;
    }
  }
  check_renderErrorMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this._changed = true;
      this.context.renderErrorMessage = currValue;
      this._changes['renderErrorMessage'] = new import1.SimpleChange(this._expr_20,currValue);
      this._expr_20 = currValue;
    }
  }
  check_containerBackgroundColor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this._changed = true;
      this.context.containerBackgroundColor = currValue;
      this._changes['containerBackgroundColor'] = new import1.SimpleChange(this._expr_21,currValue);
      this._expr_21 = currValue;
    }
  }
  check_containerBackgroundOpacity(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_22,currValue))) {
      this._changed = true;
      this.context.containerBackgroundOpacity = currValue;
      this._changes['containerBackgroundOpacity'] = new import1.SimpleChange(this._expr_22,currValue);
      this._expr_22 = currValue;
    }
  }
  check_containerClassName(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_23,currValue))) {
      this._changed = true;
      this.context.containerClassName = currValue;
      this._changes['containerClassName'] = new import1.SimpleChange(this._expr_23,currValue);
      this._expr_23 = currValue;
    }
  }
  check_baseChartMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_24,currValue))) {
      this._changed = true;
      this.context.baseChartMessageImageHAlign = currValue;
      this._changes['baseChartMessageImageHAlign'] = new import1.SimpleChange(this._expr_24,currValue);
      this._expr_24 = currValue;
    }
  }
  check_baseChartMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_25,currValue))) {
      this._changed = true;
      this.context.baseChartMessageImageVAlign = currValue;
      this._changes['baseChartMessageImageVAlign'] = new import1.SimpleChange(this._expr_25,currValue);
      this._expr_25 = currValue;
    }
  }
  check_baseChartMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_26,currValue))) {
      this._changed = true;
      this.context.baseChartMessageImageAlpha = currValue;
      this._changes['baseChartMessageImageAlpha'] = new import1.SimpleChange(this._expr_26,currValue);
      this._expr_26 = currValue;
    }
  }
  check_baseChartMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_27,currValue))) {
      this._changed = true;
      this.context.baseChartMessageImageScale = currValue;
      this._changes['baseChartMessageImageScale'] = new import1.SimpleChange(this._expr_27,currValue);
      this._expr_27 = currValue;
    }
  }
  check_typeNotSupportedMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_28,currValue))) {
      this._changed = true;
      this.context.typeNotSupportedMessageImageHAlign = currValue;
      this._changes['typeNotSupportedMessageImageHAlign'] = new import1.SimpleChange(this._expr_28,currValue);
      this._expr_28 = currValue;
    }
  }
  check_typeNotSupportedMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_29,currValue))) {
      this._changed = true;
      this.context.typeNotSupportedMessageImageVAlign = currValue;
      this._changes['typeNotSupportedMessageImageVAlign'] = new import1.SimpleChange(this._expr_29,currValue);
      this._expr_29 = currValue;
    }
  }
  check_typeNotSupportedMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_30,currValue))) {
      this._changed = true;
      this.context.typeNotSupportedMessageImageAlpha = currValue;
      this._changes['typeNotSupportedMessageImageAlpha'] = new import1.SimpleChange(this._expr_30,currValue);
      this._expr_30 = currValue;
    }
  }
  check_typeNotSupportedMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_31,currValue))) {
      this._changed = true;
      this.context.typeNotSupportedMessageImageScale = currValue;
      this._changes['typeNotSupportedMessageImageScale'] = new import1.SimpleChange(this._expr_31,currValue);
      this._expr_31 = currValue;
    }
  }
  check_dataLoadErrorMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_32,currValue))) {
      this._changed = true;
      this.context.dataLoadErrorMessageImageHAlign = currValue;
      this._changes['dataLoadErrorMessageImageHAlign'] = new import1.SimpleChange(this._expr_32,currValue);
      this._expr_32 = currValue;
    }
  }
  check_dataLoadErrorMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_33,currValue))) {
      this._changed = true;
      this.context.dataLoadErrorMessageImageVAlign = currValue;
      this._changes['dataLoadErrorMessageImageVAlign'] = new import1.SimpleChange(this._expr_33,currValue);
      this._expr_33 = currValue;
    }
  }
  check_dataLoadErrorMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_34,currValue))) {
      this._changed = true;
      this.context.dataLoadErrorMessageImageAlpha = currValue;
      this._changes['dataLoadErrorMessageImageAlpha'] = new import1.SimpleChange(this._expr_34,currValue);
      this._expr_34 = currValue;
    }
  }
  check_dataLoadErrorMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_35,currValue))) {
      this._changed = true;
      this.context.dataLoadErrorMessageImageScale = currValue;
      this._changes['dataLoadErrorMessageImageScale'] = new import1.SimpleChange(this._expr_35,currValue);
      this._expr_35 = currValue;
    }
  }
  check_dataLoadStartMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_36,currValue))) {
      this._changed = true;
      this.context.dataLoadStartMessageImageHAlign = currValue;
      this._changes['dataLoadStartMessageImageHAlign'] = new import1.SimpleChange(this._expr_36,currValue);
      this._expr_36 = currValue;
    }
  }
  check_dataLoadStartMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_37,currValue))) {
      this._changed = true;
      this.context.dataLoadStartMessageImageVAlign = currValue;
      this._changes['dataLoadStartMessageImageVAlign'] = new import1.SimpleChange(this._expr_37,currValue);
      this._expr_37 = currValue;
    }
  }
  check_dataLoadStartMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_38,currValue))) {
      this._changed = true;
      this.context.dataLoadStartMessageImageAlpha = currValue;
      this._changes['dataLoadStartMessageImageAlpha'] = new import1.SimpleChange(this._expr_38,currValue);
      this._expr_38 = currValue;
    }
  }
  check_dataLoadStartMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_39,currValue))) {
      this._changed = true;
      this.context.dataLoadStartMessageImageScale = currValue;
      this._changes['dataLoadStartMessageImageScale'] = new import1.SimpleChange(this._expr_39,currValue);
      this._expr_39 = currValue;
    }
  }
  check_dataInvalidMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_40,currValue))) {
      this._changed = true;
      this.context.dataInvalidMessageImageHAlign = currValue;
      this._changes['dataInvalidMessageImageHAlign'] = new import1.SimpleChange(this._expr_40,currValue);
      this._expr_40 = currValue;
    }
  }
  check_dataInvalidMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_41,currValue))) {
      this._changed = true;
      this.context.dataInvalidMessageImageVAlign = currValue;
      this._changes['dataInvalidMessageImageVAlign'] = new import1.SimpleChange(this._expr_41,currValue);
      this._expr_41 = currValue;
    }
  }
  check_dataInvalidMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_42,currValue))) {
      this._changed = true;
      this.context.dataInvalidMessageImageAlpha = currValue;
      this._changes['dataInvalidMessageImageAlpha'] = new import1.SimpleChange(this._expr_42,currValue);
      this._expr_42 = currValue;
    }
  }
  check_dataInvalidMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_43,currValue))) {
      this._changed = true;
      this.context.dataInvalidMessageImageScale = currValue;
      this._changes['dataInvalidMessageImageScale'] = new import1.SimpleChange(this._expr_43,currValue);
      this._expr_43 = currValue;
    }
  }
  check_dataEmptyMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_44,currValue))) {
      this._changed = true;
      this.context.dataEmptyMessageImageHAlign = currValue;
      this._changes['dataEmptyMessageImageHAlign'] = new import1.SimpleChange(this._expr_44,currValue);
      this._expr_44 = currValue;
    }
  }
  check_dataEmptyMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_45,currValue))) {
      this._changed = true;
      this.context.dataEmptyMessageImageVAlign = currValue;
      this._changes['dataEmptyMessageImageVAlign'] = new import1.SimpleChange(this._expr_45,currValue);
      this._expr_45 = currValue;
    }
  }
  check_dataEmptyMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_46,currValue))) {
      this._changed = true;
      this.context.dataEmptyMessageImageAlpha = currValue;
      this._changes['dataEmptyMessageImageAlpha'] = new import1.SimpleChange(this._expr_46,currValue);
      this._expr_46 = currValue;
    }
  }
  check_dataEmptyMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_47,currValue))) {
      this._changed = true;
      this.context.dataEmptyMessageImageScale = currValue;
      this._changes['dataEmptyMessageImageScale'] = new import1.SimpleChange(this._expr_47,currValue);
      this._expr_47 = currValue;
    }
  }
  check_renderErrorMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_48,currValue))) {
      this._changed = true;
      this.context.renderErrorMessageImageHAlign = currValue;
      this._changes['renderErrorMessageImageHAlign'] = new import1.SimpleChange(this._expr_48,currValue);
      this._expr_48 = currValue;
    }
  }
  check_renderErrorMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_49,currValue))) {
      this._changed = true;
      this.context.renderErrorMessageImageVAlign = currValue;
      this._changes['renderErrorMessageImageVAlign'] = new import1.SimpleChange(this._expr_49,currValue);
      this._expr_49 = currValue;
    }
  }
  check_renderErrorMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_50,currValue))) {
      this._changed = true;
      this.context.renderErrorMessageImageAlpha = currValue;
      this._changes['renderErrorMessageImageAlpha'] = new import1.SimpleChange(this._expr_50,currValue);
      this._expr_50 = currValue;
    }
  }
  check_renderErrorMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_51,currValue))) {
      this._changed = true;
      this.context.renderErrorMessageImageScale = currValue;
      this._changes['renderErrorMessageImageScale'] = new import1.SimpleChange(this._expr_51,currValue);
      this._expr_51 = currValue;
    }
  }
  check_loadMessageImageHAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_52,currValue))) {
      this._changed = true;
      this.context.loadMessageImageHAlign = currValue;
      this._changes['loadMessageImageHAlign'] = new import1.SimpleChange(this._expr_52,currValue);
      this._expr_52 = currValue;
    }
  }
  check_loadMessageImageVAlign(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_53,currValue))) {
      this._changed = true;
      this.context.loadMessageImageVAlign = currValue;
      this._changes['loadMessageImageVAlign'] = new import1.SimpleChange(this._expr_53,currValue);
      this._expr_53 = currValue;
    }
  }
  check_loadMessageImageAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_54,currValue))) {
      this._changed = true;
      this.context.loadMessageImageAlpha = currValue;
      this._changes['loadMessageImageAlpha'] = new import1.SimpleChange(this._expr_54,currValue);
      this._expr_54 = currValue;
    }
  }
  check_loadMessageImageScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_55,currValue))) {
      this._changed = true;
      this.context.loadMessageImageScale = currValue;
      this._changes['loadMessageImageScale'] = new import1.SimpleChange(this._expr_55,currValue);
      this._expr_55 = currValue;
    }
  }
  check_chartConfig(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_56,currValue))) {
      this._changed = true;
      this.context.chartConfig = currValue;
      this._changes['chartConfig'] = new import1.SimpleChange(this._expr_56,currValue);
      this._expr_56 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
      this.context.ngDoCheck();
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_FusionChartsComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_FusionChartsComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.FusionChartsComponent>;
  _FusionChartsService_0_3:import6.FusionChartsService;
  _FusionChartsComponent_0_4:Wrapper_FusionChartsComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FusionChartsComponent_Host0,renderType_FusionChartsComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'fusioncharts',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_FusionChartsComponent0(this.viewUtils,this,0,this._el_0);
    this._FusionChartsService_0_3 = new import6.FusionChartsService(this.injectorGet(import6.FusionChartsStatic,this.parentIndex));
    this._FusionChartsComponent_0_4 = new Wrapper_FusionChartsComponent(new import10.ElementRef(this._el_0),this._FusionChartsService_0_3,this.injectorGet(import11.KeyValueDiffers,this.parentIndex));
    this.compView_0.create(this._FusionChartsComponent_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._FusionChartsComponent_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.FusionChartsService) && (0 === requestNodeIndex))) { return this._FusionChartsService_0_3; }
    if (((token === import0.FusionChartsComponent) && (0 === requestNodeIndex))) { return this._FusionChartsComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._FusionChartsComponent_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._FusionChartsComponent_0_4.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._FusionChartsComponent_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const FusionChartsComponentNgFactory:import9.ComponentFactory<import0.FusionChartsComponent> = new import9.ComponentFactory<import0.FusionChartsComponent>('fusioncharts',View_FusionChartsComponent_Host0,import0.FusionChartsComponent);
const styles_FusionChartsComponent:any[] = ([] as any[]);
var renderType_FusionChartsComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_FusionChartsComponent,{});
export class View_FusionChartsComponent0 extends import2.AppView<import0.FusionChartsComponent> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  /*private*/ _expr_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FusionChartsComponent0,renderType_FusionChartsComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways);
    this._expr_3 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'FusionCharts will render here',(null as any));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_3:any = import3.inlineInterpolate(1,'container-',this.context.containerId,'');
    if (import3.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setElementAttribute(this._el_0,'id',((currVal_3 == null)? (null as any): currVal_3.toString()));
      this._expr_3 = currVal_3;
    }
  }
}